spring:
  rabbitmq:
    host: 127.0.0.1
    username: fanhehe
    password: 13889441200
    virtual-host: /fanhehe
    port: 5672
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1000
      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks = 0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks = 1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      # listener负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  shardingsphere:
    datasource:
      names: master, slave0, doll
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/doll?useSSL=false&useUnicode=true&characterEncoding=utf8
        username: ops
        password: ops
      slave0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/doll?useSSL=false&useUnicode=true&characterEncoding=utf8
        username: ops
        password: ops
      doll:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/doll?useSSL=false&useUnicode=true&characterEncoding=utf8
        username: ops
        password: ops
    sharding:
      tables:
        user:
          key-generator:
            type: SNOWFLAKE
            column: user_id
          actual-data-nodes: ds0.user_$->{0..9}
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: user_$->{user_id % 10}
        user_binding:
          key-generator:
            type: SNOWFLAKE # SIMPLE
            column: user_id
          actual-data-nodes: ds0.user_binding_$->{0..9}
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: user_binding_$->{user_id % 10}
        t_config:
          actual-data-nodes: ds0.t_config
      binding-tables:
        - user, user_binding
      master-slave-rules:
        ds0:
          master-data-source-name: master
          slave-data-source-names: slave0
      broadcast-tables: t_config
    props:
      sql:
        show: true
  redis:
    cluster:
      nodes: 127.0.0.1:6389,127.0.0.1:6390,127.0.0.1:6391,127.0.0.1:6392,127.0.0.1:6393,127.0.0.1:6394
      max-redirects: 3
  datasource:
    dynamic:
      datasource:
        neckpets:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/doll?useSSL=false&useUnicode=true&characterEncoding=utf8
          username: ops
          password: ops
      primary: neckpets